<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.7.16</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>cn.com.xuxiaowei</groupId>
    <artifactId>java</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>java</name>
    <description>Demo project for Spring Boot</description>
    <properties>
        <java.version>1.8</java.version>

        <!-- https://github.com/fabric8io/docker-maven-plugin -->
        <!-- https://repo1.maven.org/maven2/io/fabric8/docker-maven-plugin/ -->
        <!-- https://mvnrepository.com/artifact/io.fabric8/docker-maven-plugin -->
        <!-- https://dmp.fabric8.io/ -->
        <docker-maven-plugin.version>0.43.4</docker-maven-plugin.version>
        <!-- docker 守护程序的 URL -->
        <docker.host>tcp://docker-dind:2375</docker.host>
        <!-- docker 私库 -->
        <docker.registry>docker.io</docker.registry>
        <!-- 命名空间 -->
        <docker.namespace>xuxiaoweicomcn</docker.namespace>
        <!-- docker 上传时的用户名 -->
        <docker.username>admin</docker.username>
        <!-- docker 上传时的密码，请使用：-Ddocker.password=xxx 来指定真实密码，请勿将真实密码写在此处 -->
        <docker.password>xuxiaowei</docker.password>
        <!--
            构建时使用 -DCI_JAVA_OPTS=xxx 会覆盖此配置
            可在构建docker镜像时，指定环境变量，指定后，会记录在docker镜像中环境 JAVA_OPTS 中
            如果在启动容器时，不想使用构建时的环境变量，可自行指定
            说明：构建时指定环境变量名是 CI_JAVA_OPTS，而docker镜像记录后的名称为 JAVA_OPTS，避免因为重名而造成未知问题
            不能为空，否则报错
         -->
        <CI_JAVA_OPTS>-Xms128m -Xmx256m</CI_JAVA_OPTS>
        <!--
            构建时使用 -DCI_APP_OPTS=xxx 会覆盖此配置
            可在构建docker镜像时，指定环境变量，指定后，会记录在docker镜像中环境 APP_ARGS 中
            如果在启动容器时，不想使用构建时的环境变量，可自行指定
            用于放在 java -jar app.jar 最后，用以指定个性化参数
            说明：构建时指定环境变量名是 CI_APP_ARGS，而docker镜像记录后的名称为 APP_ARGS
            不能为空，否则报错
         -->
        <CI_APP_ARGS>--ci_author=xuxiaowei</CI_APP_ARGS>

    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

    <profiles>

        <!-- 用于构建 docker.io、registry.jihulab.com 镜像 -->
        <profile>
            <id>all</id>
            <build>
                <plugins>
                    <!-- https://mvnrepository.com/artifact/io.fabric8/docker-maven-plugin -->
                    <!-- https://github.com/fabric8io/docker-maven-plugin -->
                    <!-- https://dmp.fabric8.io/ -->
                    <!-- 打包：mvn clean package -->
                    <!-- 构建docker镜像：mvn docker:build -->
                    <!-- 上传docker镜像：mvn docker:push -->
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <version>${docker-maven-plugin.version}</version>
                        <configuration>
                            <!-- docker 守护程序的 URL -->
                            <dockerHost>${docker.host}</dockerHost>
                            <!-- docker 私库是使用 nexus 搭建的 -->
                            <registry>${docker.registry}</registry>
                            <authConfig>
                                <push>
                                    <!-- docker 上传时的用户名 -->
                                    <username>${docker.username}</username>
                                    <!-- docker 上传时的密码 -->
                                    <password>${docker.password}</password>
                                </push>
                            </authConfig>
                            <buildArgs>
                                <!--
                                    用于在 Docker 中确定 jar 包名称
                                -->
                                <GROUP_ID>${project.groupId}</GROUP_ID>
                                <ARTIFACT_ID>${project.artifactId}</ARTIFACT_ID>
                                <VERSION>${project.version}</VERSION>
                                <CI_SERVER_HOST>${CI_SERVER_HOST}</CI_SERVER_HOST>
                                <CI_PROJECT_PATH>${CI_PROJECT_PATH}</CI_PROJECT_PATH>
                                <!--
                                    CI_PIPELINE_ID：代表管道ID，用于确定管道的链接
                                 -->
                                <CI_PIPELINE_ID>${CI_PIPELINE_ID}</CI_PIPELINE_ID>
                                <!--
                                    CI_JOB_ID：代表作业ID，用于确定作业的链接
                                -->
                                <CI_JOB_ID>${CI_JOB_ID}</CI_JOB_ID>
                                <!--
                                    可在构建docker镜像时，指定环境变量，指定后，会记录在docker镜像中环境 JAVA_OPTS 中
                                    如果在启动容器时，不想使用构建时的环境变量，可自行指定
                                    说明：构建时指定环境变量名是 CI_JAVA_OPTS，而docker镜像记录后的名称为 JAVA_OPTS，避免因为重名而造成未知问题
                                 -->
                                <JAVA_OPTS>${CI_JAVA_OPTS}</JAVA_OPTS>
                                <!--
                                    可在构建docker镜像时，指定环境变量，指定后，会记录在docker镜像中环境 APP_ARGS 中
                                    如果在启动容器时，不想使用构建时的环境变量，可自行指定
                                    用于放在 java -jar app.jar 最后，用以指定个性化参数
                                    说明：构建时指定环境变量名是 CI_APP_ARGS，而docker镜像记录后的名称为 APP_ARGS
                                 -->
                                <APP_ARGS>${CI_APP_ARGS}</APP_ARGS>
                            </buildArgs>
                            <images>
                                <image>
                                    <!-- 镜像名称 -->
                                    <name>
                                        ${docker.registry}/${docker.namespace}/${project.artifactId}:${project.version}
                                    </name>
                                    <build>
                                        <dockerFile>${project.basedir}/Dockerfile</dockerFile>
                                    </build>
                                </image>
                                <image>
                                    <!--
                                        镜像名称：在版本后面增加了数字，用于储存历史记录、快速恢复容器（也可使用k8s滚动发布进行恢复）、k8s更改镜像中使用（用于发布），不需要者请注释掉此 image
                                        CI_PIPELINE_ID：代表管道ID，用于确定管道的链接
                                     -->
                                    <name>
                                        ${docker.registry}/${docker.namespace}/${project.artifactId}:${project.version}-${CI_PIPELINE_ID}
                                    </name>
                                    <build>
                                        <dockerFile>${project.basedir}/Dockerfile</dockerFile>
                                    </build>
                                </image>
                                <image>
                                    <!-- 镜像名称 -->
                                    <name>
                                        registry.jihulab.com/xuxiaowei-cloud/xuxiaowei-cloud/${project.artifactId}:${project.version}
                                    </name>
                                    <build>
                                        <dockerFile>${project.basedir}/Dockerfile</dockerFile>
                                    </build>
                                </image>
                                <image>
                                    <!--
                                        镜像名称：在版本后面增加了数字，用于储存历史记录、快速恢复容器（也可使用k8s滚动发布进行恢复）、k8s更改镜像中使用（用于发布），不需要者请注释掉此 image
                                        CI_PIPELINE_ID：代表管道ID，用于确定管道的链接
                                     -->
                                    <name>
                                        registry.jihulab.com/xuxiaowei-cloud/xuxiaowei-cloud/${project.artifactId}:${project.version}-${CI_PIPELINE_ID}
                                    </name>
                                    <build>
                                        <dockerFile>${project.basedir}/Dockerfile</dockerFile>
                                    </build>
                                </image>
                                <image>
                                    <!-- 镜像名称 -->
                                    <name>
                                        registry.jihulab.com/xuxiaowei-com-cn/${project.artifactId}:${project.version}
                                    </name>
                                    <build>
                                        <dockerFile>${project.basedir}/Dockerfile</dockerFile>
                                    </build>
                                </image>
                                <image>
                                    <!--
                                        镜像名称：在版本后面增加了数字，用于储存历史记录、快速恢复容器（也可使用k8s滚动发布进行恢复）、k8s更改镜像中使用（用于发布），不需要者请注释掉此 image
                                        CI_PIPELINE_ID：代表管道ID，用于确定管道的链接
                                     -->
                                    <name>
                                        registry.jihulab.com/xuxiaowei-com-cn/${project.artifactId}:${project.version}-${CI_PIPELINE_ID}
                                    </name>
                                    <build>
                                        <dockerFile>${project.basedir}/Dockerfile</dockerFile>
                                    </build>
                                </image>
                            </images>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- 用于推送 docker.io 镜像 -->
        <profile>
            <id>docker.io</id>
            <build>
                <plugins>
                    <!-- https://mvnrepository.com/artifact/io.fabric8/docker-maven-plugin -->
                    <!-- https://github.com/fabric8io/docker-maven-plugin -->
                    <!-- https://dmp.fabric8.io/ -->
                    <!-- 打包：mvn clean package -->
                    <!-- 构建docker镜像：mvn docker:build -->
                    <!-- 上传docker镜像：mvn docker:push -->
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <version>${docker-maven-plugin.version}</version>
                        <configuration>
                            <!-- docker 守护程序的 URL -->
                            <dockerHost>${docker.host}</dockerHost>
                            <!-- docker 私库是使用 nexus 搭建的 -->
                            <registry>${docker.registry}</registry>
                            <authConfig>
                                <push>
                                    <!-- docker 上传时的用户名 -->
                                    <username>${docker.username}</username>
                                    <!-- docker 上传时的密码 -->
                                    <password>${docker.password}</password>
                                </push>
                            </authConfig>
                            <buildArgs>
                                <!--
                                    用于在 Docker 中确定 jar 包名称
                                -->
                                <GROUP_ID>${project.groupId}</GROUP_ID>
                                <ARTIFACT_ID>${project.artifactId}</ARTIFACT_ID>
                                <VERSION>${project.version}</VERSION>
                                <CI_SERVER_HOST>${CI_SERVER_HOST}</CI_SERVER_HOST>
                                <CI_PROJECT_PATH>${CI_PROJECT_PATH}</CI_PROJECT_PATH>
                                <!--
                                    CI_PIPELINE_ID：代表管道ID，用于确定管道的链接
                                 -->
                                <CI_PIPELINE_ID>${CI_PIPELINE_ID}</CI_PIPELINE_ID>
                                <!--
                                    CI_JOB_ID：代表作业ID，用于确定作业的链接
                                -->
                                <CI_JOB_ID>${CI_JOB_ID}</CI_JOB_ID>
                                <!--
                                    可在构建docker镜像时，指定环境变量，指定后，会记录在docker镜像中环境 JAVA_OPTS 中
                                    如果在启动容器时，不想使用构建时的环境变量，可自行指定
                                    说明：构建时指定环境变量名是 CI_JAVA_OPTS，而docker镜像记录后的名称为 JAVA_OPTS，避免因为重名而造成未知问题
                                 -->
                                <JAVA_OPTS>${CI_JAVA_OPTS}</JAVA_OPTS>
                                <!--
                                    可在构建docker镜像时，指定环境变量，指定后，会记录在docker镜像中环境 APP_ARGS 中
                                    如果在启动容器时，不想使用构建时的环境变量，可自行指定
                                    用于放在 java -jar app.jar 最后，用以指定个性化参数
                                    说明：构建时指定环境变量名是 CI_APP_ARGS，而docker镜像记录后的名称为 APP_ARGS
                                 -->
                                <APP_ARGS>${CI_APP_ARGS}</APP_ARGS>
                            </buildArgs>
                            <images>
                                <image>
                                    <!-- 镜像名称 -->
                                    <name>
                                        ${docker.registry}/${docker.namespace}/${project.artifactId}:${project.version}
                                    </name>
                                    <build>
                                        <dockerFile>${project.basedir}/Dockerfile</dockerFile>
                                    </build>
                                </image>
                                <image>
                                    <!--
                                        镜像名称：在版本后面增加了数字，用于储存历史记录、快速恢复容器（也可使用k8s滚动发布进行恢复）、k8s更改镜像中使用（用于发布），不需要者请注释掉此 image
                                        CI_PIPELINE_ID：代表管道ID，用于确定管道的链接
                                     -->
                                    <name>
                                        ${docker.registry}/${docker.namespace}/${project.artifactId}:${project.version}-${CI_PIPELINE_ID}
                                    </name>
                                    <build>
                                        <dockerFile>${project.basedir}/Dockerfile</dockerFile>
                                    </build>
                                </image>
                            </images>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- 用于推送 registry.jihulab.com 镜像 -->
        <profile>
            <id>registry.jihulab.com</id>
            <build>
                <plugins>
                    <!-- https://mvnrepository.com/artifact/io.fabric8/docker-maven-plugin -->
                    <!-- https://github.com/fabric8io/docker-maven-plugin -->
                    <!-- https://dmp.fabric8.io/ -->
                    <!-- 打包：mvn clean package -->
                    <!-- 构建docker镜像：mvn docker:build -->
                    <!-- 上传docker镜像：mvn docker:push -->
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <version>${docker-maven-plugin.version}</version>
                        <configuration>
                            <!-- docker 守护程序的 URL -->
                            <dockerHost>${docker.host}</dockerHost>
                            <!-- docker 私库是使用 nexus 搭建的 -->
                            <registry>${docker.registry}</registry>
                            <authConfig>
                                <push>
                                    <!-- docker 上传时的用户名 -->
                                    <username>${docker.username}</username>
                                    <!-- docker 上传时的密码 -->
                                    <password>${docker.password}</password>
                                </push>
                            </authConfig>
                            <buildArgs>
                                <!--
                                    用于在 Docker 中确定 jar 包名称
                                -->
                                <GROUP_ID>${project.groupId}</GROUP_ID>
                                <ARTIFACT_ID>${project.artifactId}</ARTIFACT_ID>
                                <VERSION>${project.version}</VERSION>
                                <CI_SERVER_HOST>${CI_SERVER_HOST}</CI_SERVER_HOST>
                                <CI_PROJECT_PATH>${CI_PROJECT_PATH}</CI_PROJECT_PATH>
                                <!--
                                    CI_PIPELINE_ID：代表管道ID，用于确定管道的链接
                                 -->
                                <CI_PIPELINE_ID>${CI_PIPELINE_ID}</CI_PIPELINE_ID>
                                <!--
                                    CI_JOB_ID：代表作业ID，用于确定作业的链接
                                -->
                                <CI_JOB_ID>${CI_JOB_ID}</CI_JOB_ID>
                                <!--
                                    可在构建docker镜像时，指定环境变量，指定后，会记录在docker镜像中环境 JAVA_OPTS 中
                                    如果在启动容器时，不想使用构建时的环境变量，可自行指定
                                    说明：构建时指定环境变量名是 CI_JAVA_OPTS，而docker镜像记录后的名称为 JAVA_OPTS，避免因为重名而造成未知问题
                                 -->
                                <JAVA_OPTS>${CI_JAVA_OPTS}</JAVA_OPTS>
                                <!--
                                    可在构建docker镜像时，指定环境变量，指定后，会记录在docker镜像中环境 APP_ARGS 中
                                    如果在启动容器时，不想使用构建时的环境变量，可自行指定
                                    用于放在 java -jar app.jar 最后，用以指定个性化参数
                                    说明：构建时指定环境变量名是 CI_APP_ARGS，而docker镜像记录后的名称为 APP_ARGS
                                 -->
                                <APP_ARGS>${CI_APP_ARGS}</APP_ARGS>
                            </buildArgs>
                            <images>
                                <image>
                                    <!-- 镜像名称 -->
                                    <name>
                                        registry.jihulab.com/xuxiaowei-cloud/xuxiaowei-cloud/${project.artifactId}:${project.version}
                                    </name>
                                    <build>
                                        <dockerFile>${project.basedir}/Dockerfile</dockerFile>
                                    </build>
                                </image>
                                <image>
                                    <!--
                                        镜像名称：在版本后面增加了数字，用于储存历史记录、快速恢复容器（也可使用k8s滚动发布进行恢复）、k8s更改镜像中使用（用于发布），不需要者请注释掉此 image
                                        CI_PIPELINE_ID：代表管道ID，用于确定管道的链接
                                     -->
                                    <name>
                                        registry.jihulab.com/xuxiaowei-cloud/xuxiaowei-cloud/${project.artifactId}:${project.version}-${CI_PIPELINE_ID}
                                    </name>
                                    <build>
                                        <dockerFile>${project.basedir}/Dockerfile</dockerFile>
                                    </build>
                                </image>
                                <image>
                                    <!-- 镜像名称 -->
                                    <name>
                                        registry.jihulab.com/xuxiaowei-com-cn/${project.artifactId}:${project.version}
                                    </name>
                                    <build>
                                        <dockerFile>${project.basedir}/Dockerfile</dockerFile>
                                    </build>
                                </image>
                                <image>
                                    <!--
                                        镜像名称：在版本后面增加了数字，用于储存历史记录、快速恢复容器（也可使用k8s滚动发布进行恢复）、k8s更改镜像中使用（用于发布），不需要者请注释掉此 image
                                        CI_PIPELINE_ID：代表管道ID，用于确定管道的链接
                                     -->
                                    <name>
                                        registry.jihulab.com/xuxiaowei-com-cn/${project.artifactId}:${project.version}-${CI_PIPELINE_ID}
                                    </name>
                                    <build>
                                        <dockerFile>${project.basedir}/Dockerfile</dockerFile>
                                    </build>
                                </image>
                            </images>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>
